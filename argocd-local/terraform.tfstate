{"version":4,"terraform_version":"1.9.1","serial":7,"lineage":"38c064e5-7061-b68e-2455-084abea58996","outputs":{},"resources":[{"mode":"managed","type":"helm_release","name":"argo_rollouts","provider":"provider[\"registry.opentofu.org/hashicorp/helm\"]","instances":[{"schema_version":1,"attributes":{"atomic":false,"chart":"argo-rollouts","cleanup_on_fail":false,"create_namespace":false,"dependency_update":false,"description":null,"devel":null,"disable_crd_hooks":false,"disable_openapi_validation":false,"disable_webhooks":false,"force_update":false,"id":"argo-rollouts","keyring":null,"lint":false,"manifest":null,"max_history":0,"metadata":[{"app_version":"v1.8.2","chart":"argo-rollouts","first_deployed":1748246915,"last_deployed":1748246915,"name":"argo-rollouts","namespace":"argocd","notes":"","revision":1,"values":"{\"dashboard\":{\"enabled\":true}}","version":"2.39.5"}],"name":"argo-rollouts","namespace":"argocd","pass_credentials":false,"postrender":[],"recreate_pods":false,"render_subchart_notes":true,"replace":false,"repository":"https://argoproj.github.io/argo-helm","repository_ca_file":null,"repository_cert_file":null,"repository_key_file":null,"repository_password":null,"repository_username":null,"reset_values":false,"reuse_values":false,"set":[],"set_list":[],"set_sensitive":[],"skip_crds":false,"status":"deployed","timeout":300,"upgrade_install":null,"values":["dashboard:\n  enabled: true\n"],"verify":false,"version":"2.39.5","wait":true,"wait_for_jobs":false},"sensitive_attributes":[[{"type":"get_attr","value":"repository_password"}]],"private":"eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==","dependencies":["kubernetes_namespace.argocd"]}]},{"mode":"managed","type":"helm_release","name":"argocd","provider":"provider[\"registry.opentofu.org/hashicorp/helm\"]","instances":[{"schema_version":1,"attributes":{"atomic":false,"chart":"argo-cd","cleanup_on_fail":false,"create_namespace":false,"dependency_update":false,"description":null,"devel":null,"disable_crd_hooks":false,"disable_openapi_validation":false,"disable_webhooks":false,"force_update":false,"id":"argocd","keyring":null,"lint":false,"manifest":null,"max_history":0,"metadata":[{"app_version":"v2.14.11","chart":"argo-cd","first_deployed":1748246917,"last_deployed":1748246917,"name":"argocd","namespace":"argocd","notes":"\nIn order to access the server UI you have the following options:\n\n1. kubectl port-forward service/argocd-server -n argocd 8080:443\n\n    and then open the browser on http://localhost:8080 and accept the certificate\n\n2. enable ingress in the values file `server.ingress.enabled` and either\n      - Add the annotation for ssl passthrough: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough\n      - Set the `configs.params.\"server.insecure\"` in the values file and terminate SSL at your ingress: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts\n\n\nAfter reaching the UI the first time you can login with username: admin and the random password generated during the installation. You can find the password by running:\n\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n\n(You should delete the initial secret afterwards as suggested by the Getting Started Guide: https://argo-cd.readthedocs.io/en/stable/getting_started/#4-login-using-the-cli)\n","revision":1,"values":"{}","version":"7.9.1"}],"name":"argocd","namespace":"argocd","pass_credentials":false,"postrender":[],"recreate_pods":false,"render_subchart_notes":true,"replace":false,"repository":"https://argoproj.github.io/argo-helm","repository_ca_file":null,"repository_cert_file":null,"repository_key_file":null,"repository_password":null,"repository_username":null,"reset_values":false,"reuse_values":false,"set":[],"set_list":[],"set_sensitive":[],"skip_crds":false,"status":"deployed","timeout":300,"upgrade_install":null,"values":null,"verify":false,"version":"7.9.1","wait":true,"wait_for_jobs":false},"sensitive_attributes":[[{"type":"get_attr","value":"repository_password"}]],"private":"eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==","dependencies":["kubernetes_namespace.argocd"]}]},{"mode":"managed","type":"helm_release","name":"kube_prometheus_stack","provider":"provider[\"registry.opentofu.org/hashicorp/helm\"]","instances":[{"schema_version":1,"attributes":{"atomic":false,"chart":"kube-prometheus-stack","cleanup_on_fail":false,"create_namespace":true,"dependency_update":false,"description":null,"devel":null,"disable_crd_hooks":false,"disable_openapi_validation":false,"disable_webhooks":false,"force_update":false,"id":"kube-prometheus-stack","keyring":null,"lint":false,"manifest":null,"max_history":0,"metadata":[{"app_version":"v0.82.0","chart":"kube-prometheus-stack","first_deployed":1748246921,"last_deployed":1748246921,"name":"kube-prometheus-stack","namespace":"monitoring","notes":"kube-prometheus-stack has been installed. Check its status by running:\n  kubectl --namespace monitoring get pods -l \"release=kube-prometheus-stack\"\n\nGet Grafana 'admin' user password by running:\n\n  kubectl --namespace monitoring get secrets kube-prometheus-stack-grafana -o jsonpath=\"{.data.admin-password}\" | base64 -d ; echo\n\nAccess Grafana local instance:\n\n  export POD_NAME=$(kubectl --namespace monitoring get pod -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=kube-prometheus-stack\" -oname)\n  kubectl --namespace monitoring port-forward $POD_NAME 3000\n\nVisit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026 configure Alertmanager and Prometheus instances using the Operator.\n\nkube-state-metrics is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects.\nThe exposed metrics can be found here:\nhttps://github.com/kubernetes/kube-state-metrics/blob/master/docs/README.md#exposed-metrics\n\nThe metrics are exported on the HTTP endpoint /metrics on the listening port.\nIn your case, kube-prometheus-stack-kube-state-metrics.monitoring.svc.cluster.local:8080/metrics\n\nThey are served either as plaintext or protobuf depending on the Accept header.\nThey are designed to be consumed either by Prometheus itself or by a scraper that is compatible with scraping a Prometheus client endpoint.\n\n1. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace monitoring -l \"app.kubernetes.io/name=prometheus-node-exporter,app.kubernetes.io/instance=kube-prometheus-stack\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:9100 to use your application\"\n  kubectl port-forward --namespace monitoring $POD_NAME 9100\n1. Get your 'admin' user password by running:\n\n   kubectl get secret --namespace monitoring kube-prometheus-stack-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n\n\n2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:\n\n   kube-prometheus-stack-grafana.monitoring.svc.cluster.local\n\n   Get the Grafana URL to visit by running these commands in the same shell:\n     export POD_NAME=$(kubectl get pods --namespace monitoring -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=kube-prometheus-stack\" -o jsonpath=\"{.items[0].metadata.name}\")\n     kubectl --namespace monitoring port-forward $POD_NAME 3000\n\n3. Login with the password from step 1 and the username: admin\n#################################################################################\n######   WARNING: Persistence is disabled!!! You will lose your data when   #####\n######            the Grafana pod is terminated.                            #####\n#################################################################################\n","revision":1,"values":"{}","version":"72.3.0"}],"name":"kube-prometheus-stack","namespace":"monitoring","pass_credentials":false,"postrender":[],"recreate_pods":false,"render_subchart_notes":true,"replace":false,"repository":"https://prometheus-community.github.io/helm-charts","repository_ca_file":null,"repository_cert_file":null,"repository_key_file":null,"repository_password":null,"repository_username":null,"reset_values":false,"reuse_values":false,"set":[],"set_list":[],"set_sensitive":[],"skip_crds":false,"status":"deployed","timeout":300,"upgrade_install":null,"values":null,"verify":false,"version":"72.3.0","wait":true,"wait_for_jobs":false},"sensitive_attributes":[[{"type":"get_attr","value":"repository_password"}]],"private":"eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="}]},{"mode":"managed","type":"helm_release","name":"nginx_ingress","provider":"provider[\"registry.opentofu.org/hashicorp/helm\"]","instances":[{"status":"tainted","schema_version":1,"attributes":{"atomic":false,"chart":"ingress-nginx","cleanup_on_fail":false,"create_namespace":true,"dependency_update":false,"description":null,"devel":null,"disable_crd_hooks":false,"disable_openapi_validation":false,"disable_webhooks":false,"force_update":false,"id":"ingress-nginx","keyring":null,"lint":false,"manifest":null,"max_history":0,"metadata":[{"app_version":"1.12.2","chart":"ingress-nginx","first_deployed":1748246914,"last_deployed":1748246914,"name":"ingress-nginx","namespace":"nginx-ingress","notes":"The ingress-nginx controller has been installed.\nIt may take a few minutes for the load balancer IP to be available.\nYou can watch the status by running 'kubectl get service --namespace nginx-ingress ingress-nginx-controller --output wide --watch'\n\nAn example Ingress that makes use of the controller:\n  apiVersion: networking.k8s.io/v1\n  kind: Ingress\n  metadata:\n    name: example\n    namespace: foo\n  spec:\n    ingressClassName: nginx\n    rules:\n      - host: www.example.com\n        http:\n          paths:\n            - pathType: Prefix\n              backend:\n                service:\n                  name: exampleService\n                  port:\n                    number: 80\n              path: /\n    # This section is only required if TLS is to be enabled for the Ingress\n    tls:\n      - hosts:\n        - www.example.com\n        secretName: example-tls\n\nIf TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:\n\n  apiVersion: v1\n  kind: Secret\n  metadata:\n    name: example-tls\n    namespace: foo\n  data:\n    tls.crt: \u003cbase64 encoded cert\u003e\n    tls.key: \u003cbase64 encoded key\u003e\n  type: kubernetes.io/tls\n","revision":1,"values":"{}","version":"4.12.2"}],"name":"ingress-nginx","namespace":"nginx-ingress","pass_credentials":false,"postrender":[],"recreate_pods":false,"render_subchart_notes":true,"replace":false,"repository":"https://kubernetes.github.io/ingress-nginx","repository_ca_file":null,"repository_cert_file":null,"repository_key_file":null,"repository_password":null,"repository_username":null,"reset_values":false,"reuse_values":false,"set":[],"set_list":[],"set_sensitive":[],"skip_crds":false,"status":"failed","timeout":300,"upgrade_install":null,"values":null,"verify":false,"version":"4.12.2","wait":true,"wait_for_jobs":false},"sensitive_attributes":[[{"type":"get_attr","value":"repository_password"}]],"private":"eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="}]},{"mode":"managed","type":"kubernetes_namespace","name":"argocd","provider":"provider[\"registry.opentofu.org/hashicorp/kubernetes\"]","instances":[{"schema_version":0,"attributes":{"id":"argocd","metadata":[{"annotations":null,"generate_name":"","generation":0,"labels":null,"name":"argocd","resource_version":"1194","uid":"48b6fbca-2f7d-4999-a19c-7889b3360779"}],"timeouts":null,"wait_for_default_service_account":false},"sensitive_attributes":[],"private":"eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="}]}],"check_results":null}
